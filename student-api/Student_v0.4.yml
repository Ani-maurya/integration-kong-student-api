openapi: 3.0.0
info:
  title: Student API
  description: "This API will retrieve student information based on studentId, firstname, lastname or studentType. The API supports pagination by using limit and offset query param. To fetch next pages, the only param needed is nextPageId. Any other params passed along with nextPageId will be ignored as nextPageId takes priority "
  contact:
    email: integrationteam@sheffield.ac.uk
  version: 0.0.1
servers:
  - url: https://api.dev.example.com/v1
  - url: https://api.test.example.com/v1
tags:
- name: GetStudents
  description: Get Students Information
paths:
  /students:
    get:
      tags:
        - GetStudents
      summary: Retrieve student information
      description: Returns a list of student information.
      operationId: getStudents
      parameters:
        - $ref: '#/components/parameters/ContentTypeHeader'
        - $ref: '#/components/parameters/CorrelationIdHeader'
        - $ref: '#/components/parameters/RequestIdHeader'
        - $ref: '#/components/parameters/TimestampHeader'
        - name: studentId
          in: query
          description: unique student Id, if passed a single record will be fetched
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
          example:  1001
        - name: firstname
          in: query
          description: Student firstname 
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 200
          example:  smith
        - name: lastname
          in: query
          description: Student lastname 
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 200
          example:  smith
        - name: studentType
          in: query
          description: student registration status 
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 200
          example:  Attending
        - name: limit
          in: query
          description: limit the number of records
          required: false
          schema:
            type: integer
            maximum: 500
          example:  100
        - name: offset
          in: query
          description: offset the search result with the offset value
          required: false
          schema:
            type: integer
            maximum: 9999
          example:  100
        - name: nextPageId
          in: query
          description: this param can only be passed for second page and onwards only. This param will be returned in response from previous call and if this param is not populated then is no next page. Alternatively, limit and offset can be used at will.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 500
          example:  bGltaXQ9MTAwJm9mZnNldD0yMDA
       

      responses:
        '200':
          description: A list of student information.
          headers:
            x-uos-request-id:
              $ref: '#/components/headers/x-uos-request-id'
            x-uos-correlation-id:
              $ref: '#/components/headers/x-uos-correlation-id'
            x-uos-timestamp:
              $ref: '#/components/headers/x-uos-timestamp'
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    students:
                      type: array
                      items:
                        $ref: '#/components/schemas/Student'
                    totalCountOfRecords:
                      type: integer
                      description: available number of records in the datastore. This is not the number of records returned in this response. The consumer can use limit and offset query param until this totalCountOfRecords is reached
                      example: 1000
                    nextPageId:
                      type: string
                      description: available number of records in the datastore. This is not the number of records returned in this response. The consumer can use limit and offset query param until this totalCountOfRecords is reached
                      example: bGltaXQ9MTAwJm9mZnNldD0yMDA
        '400':
          description: Bad request
          headers:
            x-uos-request-id:
              $ref: '#/components/headers/x-uos-request-id'
            x-uos-correlation-id:
              $ref: '#/components/headers/x-uos-correlation-id'
            x-uos-timestamp:
              $ref: '#/components/headers/x-uos-timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          headers:
            x-uos-request-id:
              $ref: '#/components/headers/x-uos-request-id'
            x-uos-correlation-id:
              $ref: '#/components/headers/x-uos-correlation-id'
            x-uos-timestamp:
              $ref: '#/components/headers/x-uos-timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '403':
          description: Forbidden
          headers:
            x-uos-request-id:
              $ref: '#/components/headers/x-uos-request-id'
            x-uos-correlation-id:
              $ref: '#/components/headers/x-uos-correlation-id'
            x-uos-timestamp:
              $ref: '#/components/headers/x-uos-timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '500':
          description: Internal Server Error
          headers:
            x-uos-request-id:
              $ref: '#/components/headers/x-uos-request-id'
            x-uos-correlation-id:
              $ref: '#/components/headers/x-uos-correlation-id'
            x-uos-timestamp:
              $ref: '#/components/headers/x-uos-timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
        - bearerAuth: ['uos/student-read', 'uos/student-read-all']
        - apiKey: []

components:
  schemas:
    Student:
      type: object
      properties:
        title:
          type: integer
          description: The student's ID.
          example: 123
        forename:
          type: string
          description: The student's forename.
          example: "Alice"
        lastname:
          type: string
          description: The student's knownas name.
          example: "John"
        universityEmail:
          type: string
          format: email
          description: The student's university email.
          example: "alice.smith@university.edu"
        studentType:
          type: string
          description: The student's domain .
          enum:
            - Attending
            - Current
          example: "Attending"
    Error400:
      type: object
      required:
        - code
        - description
        - message
        - source
        - type
      properties:
        code:
          type: number
          description: 5 digit error message code
          example: 10000
          enum:
            - 10000
        description:
          type: string
          description: Description for the 5 digit  message code.
          example: Required fields are missing or invalid data specified in the request. Please refer to the API documentation for more details.
        source:
          type: string
          description: Source of the message
          example: Middleware
          enum:
            - Backend
            - Middleware
        message:
          type: string
          description: Any message for the consuming system for use in UI or in the application
          example: Invalid_JSON
        type:
          type: string
          description: Type of the message
          example: Validation
          enum:
            - System
            - Business
            - Validation
    Error401:
      type: object
      required:
        - code
        - description
        - message
        - source
        - type
      properties:
        code:
          type: number
          description: 5 digit error message code
          example: 10001
          enum:
            - 10001
        description:
          type: string
          description: Description for the 5 digit  message code.
          example: Invalid Authorization Token or API Key Passed
        source:
          type: string
          description: Source of the message
          example: Middleware
          enum:
            - Backend
            - Middleware
        message:
          type: string
          description: Any message for the consuming system for use in UI or in the application
          example: Unauthorized
        type:
          type: string
          description: Type of the message
          example: Validation
          enum:
            - System
            - Business
            - Validation
    Error403:
      type: object
      required:
        - code
        - description
        - message
        - source
        - type
      properties:
        code:
          type: number
          description: 5 digit error message code
          example: 10002
          enum:
            - 10000
        description:
          type: string
          description: Description for the 5 digit  message code.
          example: Invalid Token or API key
        source:
          type: string
          description: Source of the message
          example: Middleware
          enum:
            - Backend
            - Middleware
        message:
          type: string
          description: Any message for the consuming system for use in UI or in the application
          example: Forbidden 
        type:
          type: string
          description: Type of the message
          example: Validation
          enum:
            - System
            - Business
            - Validation
    Error500:
      type: object
      required:
        - code
        - description
        - message
        - source
        - type
      properties:
        code:
          type: number
          description: 5 digit  message code
          example: 20000
          enum:
            - 20000
        description:
          type: string
          description: Description for the 5 digit  message code.
          example: Internal Server Error
        source:
          type: string
          description: Source of the message
          example: Backend
          enum:
            - Backend
            - Middleware
        message:
          type: string
          description: Any message for the consuming system for use in UI or in the application
        type:
          type: string
          description: Type of the message
          example: System
          enum:
            - System
            - Business
            - Validation
  headers:
    x-uos-timestamp:
        description: Timestamp for when the API response was made.
        required: true
        schema:
         type: string
         format: date-time
        example: 2023-10-26T15:22:10Z
    x-uos-correlation-id:
        description: A unique identifier used by consumers or within the microservices layer in a business process journey.
        required: false
        schema:
          type: string
          minLength: 1            
          maxLength: 100

    x-uos-request-id:
      description: A unique identifier for the API request. 
      required: true
      schema:
        type: string
        minLength: 1            
        maxLength: 100       
  parameters:
    ContentTypeHeader:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: application/json
        enum:
          - application/json
          - application/xml
    CorrelationIdHeader:
      name: x-uos-correlation-id
      in: header
      required: false
      schema:
        type: string
        minLength: 1            
        maxLength: 300
        description: A unique identifier used by consumers or within the microservices layer in a business process journey.
        example: e29b-41d4-a716-44665544000
    RequestIdHeader:
      name: x-uos-request-id
      in: header
      required: true
      schema:
        type: string
        minLength: 5            
        maxLength: 300
        description: A unique identifier for the API request.
        example: 550e8400-e29b-41d4-a716-446655440000
    TimestampHeader:
      name: x-uos-timestamp
      in: header
      required: true
      schema:
        type: string
        description: Timestamp for when the API request was made.
        format: date-time
        example: 2023-10-26T15:22:10Z
        
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth2/token
          scopes:
            uos/student-read: Read student information
            uos/student-read-all: Read all student information
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
